<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>協同產品設計實習-G9-國立虎尾科技大學-機械設計工程系</title>
  
  
  <link href="/cd2018/atom.xml" rel="self"/>
  
  <link href="https://s40523119.github.io/cd2018/"/>
  <updated>2018-06-11T12:44:00.000Z</updated>
  <id>https://s40523119.github.io/cd2018/</id>
  
  <author>
    <name>林建安</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>齒輪參考資料</title>
    <link href="https://s40523119.github.io/cd2018/2018/06/11/Gear-References/"/>
    <id>https://s40523119.github.io/cd2018/2018/06/11/Gear-References/</id>
    <published>2018-06-11T12:31:02.000Z</published>
    <updated>2018-06-11T12:44:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="齒輪產生參考資料"><a href="#齒輪產生參考資料" class="headerlink" title="齒輪產生參考資料:"></a>齒輪產生參考資料:</h2><ul><li><a href="http://www.otvinta.com/gear.html" target="_blank" rel="noopener">Involute Gear Calculator</a></li><li><a href="https://github.com/richard-clark/Gear-Generator" target="_blank" rel="noopener">Gear-Generator</a></li><li><a href="https://github.com/heartworm/py_gear_gen" target="_blank" rel="noopener">py_gear_gen</a></li><li><a href="https://github.com/e-dub/pygear" target="_blank" rel="noopener">pygear</a></li><li><a href="http://help.autodesk.com/view/INVNTOR/2016/CHT/?guid=GUID-AC237C37-5150-4A61-9A11-C6E3DF4DE38D" target="_blank" rel="noopener">正齒輪的基本幾何計算</a></li><li><a href="http://www.khkgears.co.jp/orderGearDraw/order/order.do?lang=zh_TW" target="_blank" rel="noopener">正齒輪繪圖器</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;齒輪產生參考資料&quot;&gt;&lt;a href=&quot;#齒輪產生參考資料&quot; class=&quot;headerlink&quot; title=&quot;齒輪產生參考資料:&quot;&gt;&lt;/a&gt;齒輪產生參考資料:&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.otvinta.com/gear.h
      
    
    </summary>
    
    
      <category term="gear" scheme="https://s40523119.github.io/cd2018/tags/gear/"/>
    
      <category term="python" scheme="https://s40523119.github.io/cd2018/tags/python/"/>
    
      <category term="gear-generator" scheme="https://s40523119.github.io/cd2018/tags/gear-generator/"/>
    
  </entry>
  
  <entry>
    <title>部屬Flask到Heroku</title>
    <link href="https://s40523119.github.io/cd2018/2018/04/22/depoly-flask-to-heroku/"/>
    <id>https://s40523119.github.io/cd2018/2018/04/22/depoly-flask-to-heroku/</id>
    <published>2018-04-22T12:21:26.000Z</published>
    <updated>2018-04-22T16:45:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>參照上一篇文章所製作好的網站，將它部屬到Heroku雲端伺服服務。<br><a id="more"></a></p><h3 id="STEP-1"><a href="#STEP-1" class="headerlink" title="STEP 1"></a>STEP 1</h3><ul><li>設定Heroku環境</li></ul><p>為你的電腦安裝<a href="https://devcenter.heroku.com/articles/heroku-cli" target="_blank" rel="noopener">Heroku Cli</a></p><h3 id="STEP-2"><a href="#STEP-2" class="headerlink" title="STEP 2"></a>STEP 2</h3><ul><li>建立一個heroku 應用</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">heroku login</span><br></pre></td></tr></table></figure><p>登入heroku</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">heroku create your_app</span><br></pre></td></tr></table></figure><p>建立你的應用程式</p><h3 id="STEP-3"><a href="#STEP-3" class="headerlink" title="STEP 3"></a>STEP 3</h3><ul><li>設定部屬參數檔案</li></ul><p>新增三個檔案至根目錄:</p><p><code>Procfile</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">web: gunicorn flaskr:app</span><br></pre></td></tr></table></figure><p><code>requirements.txt</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">flask</span><br><span class="line">gunicorn</span><br><span class="line">Flask-Heroku</span><br><span class="line">Jinja2</span><br></pre></td></tr></table></figure><p><code>runtime.txt</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python-3.6.4</span><br></pre></td></tr></table></figure><h3 id="STEP-4"><a href="#STEP-4" class="headerlink" title="STEP 4"></a>STEP 4</h3><ul><li>將應用綁定至一個Git倉儲</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">heroku git:remote -a your_app</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -am &quot;make it better&quot;</span><br><span class="line">git push heroku master</span><br></pre></td></tr></table></figure><p>部屬結束!</p><p>前往: <a href="https://your_app.herokuapp.com/" target="_blank" rel="noopener">https://your_app.herokuapp.com/</a> 看看是不是成功了呢!!</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;參照上一篇文章所製作好的網站，將它部屬到Heroku雲端伺服服務。&lt;br&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://s40523119.github.io/cd2018/tags/Python/"/>
    
      <category term="Flask" scheme="https://s40523119.github.io/cd2018/tags/Flask/"/>
    
      <category term="Heroku" scheme="https://s40523119.github.io/cd2018/tags/Heroku/"/>
    
  </entry>
  
  <entry>
    <title>利用Flask建立一個簡單的網站</title>
    <link href="https://s40523119.github.io/cd2018/2018/04/22/create-flask/"/>
    <id>https://s40523119.github.io/cd2018/2018/04/22/create-flask/</id>
    <published>2018-04-22T08:45:33.000Z</published>
    <updated>2018-04-22T11:15:12.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>參照FLASK官方文件教學</p></blockquote><a id="more"></a><h2 id="What’s-Flask"><a href="#What’s-Flask" class="headerlink" title="What’s Flask?"></a>What’s Flask?</h2><p><code>Flask</code>是Python輕量級網站開發框架，比起包山包海的<a href="https://www.djangoproject.com/" target="_blank" rel="noopener">Django</a>定位就有所不同，適合輕度、簡易、快速的網站建立。<br>它依賴兩個外部模組，分別是<a href="http://jinja.pocoo.org/" target="_blank" rel="noopener">Jinja2</a>和<a href="http://werkzeug.pocoo.org/" target="_blank" rel="noopener">Werkzeug</a>，負責網站模板開發和處理WSGI。<br>快速、簡易、微小，就是Flask！ 以下為一個最簡單的Flask網站<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span>  flask  <span class="keyword">import</span>  Flask</span><br><span class="line">app  =  Flask ( __name__ )</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route ( '/' )</span></span><br><span class="line"><span class="function"><span class="keyword">def</span>  <span class="title">hello_world</span> <span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span>  <span class="string">'Hello World!'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>  __name__  ==  <span class="string">'__main__'</span> :</span><br><span class="line">    app . run ()</span><br></pre></td></tr></table></figure></p><h2 id="製作一個簡單Flask網站"><a href="#製作一個簡單Flask網站" class="headerlink" title="製作一個簡單Flask網站"></a>製作一個簡單Flask網站</h2><h3 id="STEP-1"><a href="#STEP-1" class="headerlink" title="STEP 1"></a>STEP 1</h3><ul><li>建立工作目錄</li></ul><p>首先，在自己的工作目錄下，為我們的Flask建立以下樹狀結構，以便之後的工作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/flaskr</span><br><span class="line">    /flaskr</span><br><span class="line">        /static</span><br><span class="line">        /templates</span><br></pre></td></tr></table></figure><p>為外層定義為Flask(../)主目錄，內層為Flask其中一個應用程式命名為flaskr，再下層兩個目錄static、templates，負責放置靜態檔以及網站模板。</p><h3 id="STEP-2"><a href="#STEP-2" class="headerlink" title="STEP 2"></a>STEP 2</h3><ul><li>建立數據庫的組態描述</li></ul><div class="tip"><br>Flask只支援<code>SQLite</code><br></div>    <p>在<code>flaskr/flaskr</code>下建立<code>schema.sql</code>，並新增以下代碼到檔案內:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">exists</span> entries; <span class="comment">--創建列表確保能夠初始化</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> entries ( <span class="comment">--建立一個名為entries的表格</span></span><br><span class="line">  <span class="keyword">id</span> <span class="built_in">integer</span> primary <span class="keyword">key</span> autoincrement, <span class="comment">--ID，整數型態、獨立、自動遞增</span></span><br><span class="line">  title <span class="built_in">text</span> <span class="keyword">not</span> <span class="literal">null</span>, <span class="comment">--TITLE，文字型態，標題</span></span><br><span class="line">  <span class="string">'text'</span> <span class="built_in">text</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="comment">-- TEXT，文字型態，存放文章內容</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="STEP-3"><a href="#STEP-3" class="headerlink" title="STEP 3"></a>STEP 3</h3><ul><li>設置應用程式代碼</li></ul><p>在<code>flaskr/flaskr</code>下，新增<code>flaskr.py</code>，加入以下代碼:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 導入模組</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, session, g, redirect, url_for, abort, \</span><br><span class="line">     render_template, flash</span><br><span class="line"></span><br><span class="line"><span class="comment">##應用程式定義</span></span><br><span class="line"></span><br><span class="line">app = Flask(__name__) <span class="comment"># 建立app</span></span><br><span class="line">app.config.from_object(__name__) <span class="comment"># 從此檔案讀取設定, flaskr.py</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 設定參數</span></span><br><span class="line">app.config.update(dict(</span><br><span class="line">    DATABASE=os.path.join(app.root_path, <span class="string">'flaskr.db'</span>),</span><br><span class="line">    SECRET_KEY=<span class="string">'development key'</span>,</span><br><span class="line">    USERNAME=<span class="string">'admin'</span>,</span><br><span class="line">    PASSWORD=<span class="string">'default'</span></span><br><span class="line">))</span><br><span class="line">app.config.from_envvar(<span class="string">'FLASKR_SETTINGS'</span>, silent=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">##數據庫</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">connect_db</span><span class="params">()</span>:</span> <span class="comment">##連接數據庫</span></span><br><span class="line">    <span class="string">"""Connects to the specific database."""</span></span><br><span class="line">    rv = sqlite3.connect(app.config[<span class="string">'DATABASE'</span>])</span><br><span class="line">    rv.row_factory = sqlite3.Row</span><br><span class="line">    <span class="keyword">return</span> rv</span><br></pre></td></tr></table></figure><h3 id="STEP-4"><a href="#STEP-4" class="headerlink" title="STEP 4"></a>STEP 4</h3><ul><li>以模組的型態安裝我們所建立的app(flaskr)</li></ul><p>在根目錄<code>flaskr/</code>創建兩個檔案，分別是<code>setup.py</code>、<code>MANIFEST.in</code></p><p>在<code>setup.py</code>裡新增：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> setuptools <span class="keyword">import</span> setup</span><br><span class="line"></span><br><span class="line">setup(</span><br><span class="line">    name=<span class="string">'flaskr'</span>,</span><br><span class="line">    packages=[<span class="string">'flaskr'</span>],</span><br><span class="line">    include_package_data=<span class="keyword">True</span>,</span><br><span class="line">    install_requires=[</span><br><span class="line">        <span class="string">'flask'</span>,</span><br><span class="line">    ],</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>在<code>MANIFEST.in</code>裡新增:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">graft flaskr/templates</span><br><span class="line">graft flaskr/static</span><br><span class="line">include flaskr/schema.sql</span><br></pre></td></tr></table></figure></p><p>在目錄<code>flaskr/flaskr</code>下創建<code>__init__.py</code>並新增:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> .flaskr <span class="keyword">import</span> app</span><br></pre></td></tr></table></figure><p>開啟cmd，並移動到flaskr工作目錄，分別執行以下代碼:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install --editable .</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">set FLASK_APP=flaskr</span><br><span class="line">set FLASK_DEBUG=true</span><br><span class="line">flask run</span><br></pre></td></tr></table></figure><p>你將會看到flaskr建立在本地端Port5000的位置!</p><h3 id="STEP-5"><a href="#STEP-5" class="headerlink" title="STEP 5"></a>STEP 5</h3><ul><li>在<code>flaskr.py</code>加入連結資料庫的程式代碼:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_db</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""Opens a new database connection if there is none yet for the</span></span><br><span class="line"><span class="string">    current application context.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> hasattr(g, <span class="string">'sqlite_db'</span>):</span><br><span class="line">        g.sqlite_db = connect_db()</span><br><span class="line">    <span class="keyword">return</span> g.sqlite_db</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.teardown_appcontext</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">close_db</span><span class="params">(error)</span>:</span></span><br><span class="line">    <span class="string">"""Closes the database again at the end of the request."""</span></span><br><span class="line">    <span class="keyword">if</span> hasattr(g, <span class="string">'sqlite_db'</span>):</span><br><span class="line">        g.sqlite_db.close()</span><br></pre></td></tr></table></figure><h3 id="STEP-6"><a href="#STEP-6" class="headerlink" title="STEP 6"></a>STEP 6</h3><ul><li><p>透過先前製作的資料庫組態描述建立資料庫</p></li><li><p>在<code>flaskr.py</code>加入連結資料庫的程式代碼:</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init_db</span><span class="params">()</span>:</span></span><br><span class="line">    db = get_db()</span><br><span class="line">    <span class="keyword">with</span> app.open_resource(<span class="string">'schema.sql'</span>, mode=<span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        db.cursor().executescript(f.read())</span><br><span class="line">    db.commit()</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.cli.command('initdb')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">initdb_command</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""Initializes the database."""</span></span><br><span class="line">    init_db()</span><br><span class="line">    print(<span class="string">'Initialized the database.'</span>)</span><br></pre></td></tr></table></figure><p>並在cmd執行<code>flask init</code>，你將看到<code>Initialized the database.</code>。</p><h3 id="STEP-7"><a href="#STEP-7" class="headerlink" title="STEP 7"></a>STEP 7</h3><ul><li>建立處理視圖部份的代碼:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##################</span></span><br><span class="line"><span class="comment"># FUNC SETTINGS #</span></span><br><span class="line"><span class="comment">##################</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_entries</span><span class="params">()</span>:</span></span><br><span class="line">    db = get_db()</span><br><span class="line">    cur = db.execute(<span class="string">'select id, title, text from entries order by id desc'</span>)</span><br><span class="line">    entries = cur.fetchall()</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'show_entries.html'</span>, entries=entries)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/login', methods=['GET', 'POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">()</span>:</span></span><br><span class="line">    error = <span class="keyword">None</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">        <span class="keyword">if</span> request.form[<span class="string">'username'</span>] != app.config[<span class="string">'USERNAME'</span>]:</span><br><span class="line">            error = <span class="string">'Invalid username'</span></span><br><span class="line">        <span class="keyword">elif</span> request.form[<span class="string">'password'</span>] != app.config[<span class="string">'PASSWORD'</span>]:</span><br><span class="line">            error = <span class="string">'Invalid password'</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            session[<span class="string">'logged_in'</span>] = <span class="keyword">True</span></span><br><span class="line">            flash(<span class="string">'登入成功！'</span>)</span><br><span class="line">            <span class="keyword">return</span> redirect(url_for(<span class="string">'show_entries'</span>))</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'login.html'</span>, error=error)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/logout')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">logout</span><span class="params">()</span>:</span></span><br><span class="line">    session.pop(<span class="string">'logged_in'</span>, <span class="keyword">None</span>)</span><br><span class="line">    flash(<span class="string">'登出成功！'</span>)</span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">'show_entries'</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/add', methods=['POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_entry</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> session.get(<span class="string">'logged_in'</span>):</span><br><span class="line">        abort(<span class="number">401</span>)</span><br><span class="line">    db = get_db()</span><br><span class="line">    db.execute(<span class="string">'insert into entries (title, text) values (?, ?)'</span>,</span><br><span class="line">                 [request.form[<span class="string">'title'</span>], request.form[<span class="string">'text'</span>]])</span><br><span class="line">    db.commit()</span><br><span class="line">    flash(<span class="string">'新文章發布成功！'</span>)</span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">'show_entries'</span>))</span><br></pre></td></tr></table></figure><h3 id="STEP-8"><a href="#STEP-8" class="headerlink" title="STEP 8"></a>STEP 8</h3><ul><li>為我們的網站新增模板</li></ul><p>在<code>flaskr/flaskr/templates</code>新增三個模板:</p><p><code>layout.html</code>:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Flaskr<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">stylesheet</span> <span class="attr">type</span>=<span class="string">text/css</span> <span class="attr">href</span>=<span class="string">"&#123;&#123; url_for('static', filename='style.css') &#125;&#125;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">page</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Flaskr<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">metanav</span>&gt;</span></span><br><span class="line">  &#123;% if not session.logged_in %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;&#123; url_for('login') &#125;&#125;"</span>&gt;</span>log in<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  &#123;% else %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;&#123; url_for('logout') &#125;&#125;"</span>&gt;</span>log out<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  &#123;% for message in get_flashed_messages() %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">flash</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  &#123;% endfor %&#125;</span><br><span class="line">  &#123;% block body %&#125;&#123;% endblock %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>show_entries.html</code>:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends "layout.html" %&#125;</span><br><span class="line">&#123;% block body %&#125;</span><br><span class="line">  &#123;% if session.logged_in %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"&#123;&#123; url_for('add_entry') &#125;&#125;"</span> <span class="attr">method</span>=<span class="string">post</span> <span class="attr">class</span>=<span class="string">add-entry</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span>Title:</span><br><span class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">text</span> <span class="attr">size</span>=<span class="string">30</span> <span class="attr">name</span>=<span class="string">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span>Text:</span><br><span class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">text</span> <span class="attr">rows</span>=<span class="string">5</span> <span class="attr">cols</span>=<span class="string">40</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">submit</span> <span class="attr">value</span>=<span class="string">Share</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">entries</span>&gt;</span></span><br><span class="line">  &#123;% for entry in entries %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123; entry.title &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span>&#123;&#123; entry.text|safe &#125;&#125;</span><br><span class="line">  &#123;% else %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">em</span>&gt;</span>Unbelievable.  No entries here so far<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line">  &#123;% endfor %&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><p><code>login.html</code>:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends "layout.html" %&#125;</span><br><span class="line">&#123;% block body %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Login<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  &#123;% if error %&#125;<span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">error</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span>Error:<span class="tag">&lt;/<span class="name">strong</span>&gt;</span> &#123;&#123; error &#125;&#125;&#123;% endif %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"&#123;&#123; url_for('login') &#125;&#125;"</span> <span class="attr">method</span>=<span class="string">post</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dt</span>&gt;</span>Username:</span><br><span class="line">      <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">text</span> <span class="attr">name</span>=<span class="string">username</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dt</span>&gt;</span>Password:</span><br><span class="line">      <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">password</span> <span class="attr">name</span>=<span class="string">password</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">submit</span> <span class="attr">value</span>=<span class="string">Login</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><h3 id="STEP-9"><a href="#STEP-9" class="headerlink" title="STEP 9"></a>STEP 9</h3><ul><li><p>建立CSS樣式檔</p></li><li><p>在<code>flaskr/flaskr/static</code>下新增</p></li></ul><p><code>style.css</code>:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>            &#123; <span class="attribute">font-family</span>: sans-serif; <span class="attribute">background</span>: <span class="number">#eee</span>; &#125;</span><br><span class="line"><span class="selector-tag">a</span>, <span class="selector-tag">h1</span>, <span class="selector-tag">h2</span>       &#123; <span class="attribute">color</span>: <span class="number">#377ba8</span>; &#125;</span><br><span class="line"><span class="selector-tag">h1</span>, <span class="selector-tag">h2</span>          &#123; <span class="attribute">font-family</span>: <span class="string">'Georgia'</span>, serif; <span class="attribute">margin</span>: <span class="number">0</span>; &#125;</span><br><span class="line"><span class="selector-tag">h1</span>              &#123; <span class="attribute">border-bottom</span>: <span class="number">2px</span> solid <span class="number">#eee</span>; &#125;</span><br><span class="line"><span class="selector-tag">h2</span>              &#123; <span class="attribute">font-size</span>: <span class="number">1.2em</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.page</span>           &#123; <span class="attribute">margin</span>: <span class="number">2em</span> auto; <span class="attribute">width</span>: <span class="number">35em</span>; <span class="attribute">border</span>: <span class="number">5px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">                  <span class="attribute">padding</span>: <span class="number">0.8em</span>; <span class="attribute">background</span>: white; &#125;</span><br><span class="line"><span class="selector-class">.entries</span>        &#123; <span class="attribute">list-style</span>: none; <span class="attribute">margin</span>: <span class="number">0</span>; <span class="attribute">padding</span>: <span class="number">0</span>; &#125;</span><br><span class="line"><span class="selector-class">.entries</span> <span class="selector-tag">li</span>     &#123; <span class="attribute">margin</span>: <span class="number">0.8em</span> <span class="number">1.2em</span>; &#125;</span><br><span class="line"><span class="selector-class">.entries</span> <span class="selector-tag">li</span> <span class="selector-tag">h2</span>  &#123; <span class="attribute">margin-left</span>: -<span class="number">1em</span>; &#125;</span><br><span class="line"><span class="selector-class">.add-entry</span>      &#123; <span class="attribute">font-size</span>: <span class="number">0.9em</span>; <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>; &#125;</span><br><span class="line"><span class="selector-class">.add-entry</span> <span class="selector-tag">dl</span>   &#123; <span class="attribute">font-weight</span>: bold; &#125;</span><br><span class="line"><span class="selector-class">.metanav</span>        &#123; <span class="attribute">text-align</span>: right; <span class="attribute">font-size</span>: <span class="number">0.8em</span>; <span class="attribute">padding</span>: <span class="number">0.3em</span>;</span><br><span class="line">                  <span class="attribute">margin-bottom</span>: <span class="number">1em</span>; <span class="attribute">background</span>: <span class="number">#fafafa</span>; &#125;</span><br><span class="line"><span class="selector-class">.flash</span>          &#123; <span class="attribute">background</span>: <span class="number">#cee5F5</span>; <span class="attribute">padding</span>: <span class="number">0.5em</span>;</span><br><span class="line">                  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#aacbe2</span>; &#125;</span><br><span class="line"><span class="selector-class">.error</span>          &#123; <span class="attribute">background</span>: <span class="number">#f0d6d6</span>; <span class="attribute">padding</span>: <span class="number">0.5em</span>; &#125;</span><br></pre></td></tr></table></figure><h3 id="STEP-10"><a href="#STEP-10" class="headerlink" title="STEP 10"></a>STEP 10</h3><p>並在cmd執行，<code>flask run</code>，看看是不是成功了呢?</p><p><img src="http://flask.pocoo.org/docs/0.12/_images/flaskr.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;參照FLASK官方文件教學&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://s40523119.github.io/cd2018/tags/Python/"/>
    
      <category term="Flask" scheme="https://s40523119.github.io/cd2018/tags/Flask/"/>
    
      <category term="Heroku" scheme="https://s40523119.github.io/cd2018/tags/Heroku/"/>
    
  </entry>
  
  <entry>
    <title>Run Lua In Web</title>
    <link href="https://s40523119.github.io/cd2018/2018/03/20/run-lua-in-web/"/>
    <id>https://s40523119.github.io/cd2018/2018/03/20/run-lua-in-web/</id>
    <published>2018-03-20T08:23:34.000Z</published>
    <updated>2018-03-27T04:03:46.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css" integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous"><script src="https://code.jquery.com/jquery-3.2.1.slim.min.js" integrity="sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN" crossorigin="anonymous"></script><link rel="stylesheet" href="./../../../../data/style.css"><script src="./../../../../data/ace/ace.js" type="text/javascript" charset="utf-8"></script><script src="./../../../../data/ace/mode-lua.js"></script><script src="./../../../../data/fengari-web.js"></script><script src="./../../../../data/editor.lua" type="application/lua" async></script><script src="./../../../../data/editor.js"></script><div class="repl-container"><br>  <div class="editor-container"><br>    <div class="editor">    print("Hello World")    <br>    </div><br>  </div><br>  <div><br>    <button type="button" class="btn btn-primary btn-execute" style="margin:15px">執行</button><br>  </div><br>  <div class="output"></div><br></div><canvas id="myCanvas" width="200" height="300"></canvas>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; href=&quot;https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css&quot; integrity=&quot;sha384-Gn5384xqQ1aoWXA+058RXP
      
    
    </summary>
    
    
      <category term="Javascript" scheme="https://s40523119.github.io/cd2018/tags/Javascript/"/>
    
      <category term="ace editor" scheme="https://s40523119.github.io/cd2018/tags/ace-editor/"/>
    
      <category term="lua" scheme="https://s40523119.github.io/cd2018/tags/lua/"/>
    
  </entry>
  
  <entry>
    <title>Pelican vs Hexo(2)</title>
    <link href="https://s40523119.github.io/cd2018/2018/03/18/hexo-vs-pelican/"/>
    <id>https://s40523119.github.io/cd2018/2018/03/18/hexo-vs-pelican/</id>
    <published>2018-03-18T08:23:34.000Z</published>
    <updated>2018-03-27T03:21:18.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="How-About-Pelican"><a href="#How-About-Pelican" class="headerlink" title="How About Pelican?"></a>How About Pelican?</h2><p><img src="https://avatars2.githubusercontent.com/u/2043492?s=200&amp;v=4" alt=""></p><p>它是確實是我第一個接觸的Static Site Generator，不過並無深入了解它，再加上不懂 Leo editor的節點特性，當時總覺得是無字天書，只會記住幾個死步驟來做事情。而且那時候是利用老師為我們處理好的檔案，只要知道如何新增文章跟產生靜態就好，從新建到部屬的流程都不清楚。但現在要做的比較呢，我不把 Leo editor列入 Pelican評鑑的條件之一，因為老師整理得實在是很方便，純粹分析框架系統特色。</p><p>依照 Pelican的官網指示，需在本機先安裝 Python，再透過套件管理系統來安裝 Pelican，再利用指令 pelican-quickstart來初始化部落格，不過接受下會詢問多道問題，部分題目可空白，部分則一定得輸入。這一點，我倒不是很喜歡，應該一個指令直接為我生成能夠運行的範例網站即可，某些複雜深入的設定，再後續繼進行設定就好。</p><p>不過，值得讚許的是，Pelican只利用數個檔案，總容量大小約10KB，就能夠為我們工作，輕量、快速!但站在未曾學習過 Pyhton的人來說，裡面網站的設定檔pelicanconf.py，要很快地看懂它，也需要一些時間，因為會牽扯到 Python語法的問題，縮排或是括號…等等，都會讓文檔在運作時產生例外。</p><p>在新增文章的方面，官方說明是得自己新增一個md檔，這太不便了吧…雖說擅長使用cmd的工程師來說不算什麼，不過一般使用者得自己建檔就是多少感到麻煩，前面標頭的標題和其他標籤也得自己填上，實在有點不便。</p><h2 id="How-About-Hexo"><a href="#How-About-Hexo" class="headerlink" title="How About Hexo?"></a>How About Hexo?</h2><p><img src="https://3.bp.blogspot.com/-7AP9jD8pW_I/V9oILsTPNmI/AAAAAAAAedo/ckA9hiA7xBEEMjmh10RiEnIGIf5AwPxOACLcB/s1600/Hexo.png" alt=""></p><p>後來使用了它作為網誌系統，它主要是使用Javascript裡的程式庫 Node.js，這是近幾年時下火熱的程式庫。安裝完Node，只要五行指令，活生生的部落個就在眼前。比起Pelican來說，輕鬆很多不必先行回答許多設定，範例當中已經為我們新建一篇範例文章。但是，很大的缺點是，初始化建立部落格時，會自動連上npm套件管系統，為我們下載需多的套件，初始化完成依照網路時間與硬碟運作速度而定，我大概等了245秒左右，比起Pelican來說，實在慢了太多。</p><p>Hexo最吸引我的是，它擁有許多華麗的主題可以選擇，而且插件多樣性與功能支援性非常廣泛、強大，設定檔的部分使用 YAML語法，非常的清楚明瞭又好懂，不用括號抑或是冒號，整體的可視度好非常多。新增文章也可透過指令執行，HEXO會自動生成相對應的MD檔已經為我們填上當下建立的時間以及給予一個空的標籤欄位，供我們使用。方便性也大Pelican需手動設置的手續。HEXO還有一項優點是，它在網上擁有許多使用者，大多遇到的BUG提出來，很快的大火們都能為你解決。</p><p>更多詳細資訊請參考以下連結。</p><ul><li>Reference:<ul><li><a href="http://www.pyslvs.com/blog/scrum_design-design_methods-and-mechanical-design.html" target="_blank" rel="noopener">PELICAN設計內容</a></li><li><a href="https://blog.getpelican.com/" target="_blank" rel="noopener">Pelican</a></li><li><a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a></li><li><a href="https://en.wikipedia.org/wiki/YAML" target="_blank" rel="noopener">YAML</a></li><li><a href="https://en.wikipedia.org/wiki/ReStructuredText" target="_blank" rel="noopener">reStructuredText</a></li><li><a href="https://en.wikipedia.org/wiki/Markdown" target="_blank" rel="noopener">Markdown</a></li><li><a href="https://en.wikipedia.org/wiki/Static_web_page" target="_blank" rel="noopener">Static web page</a></li><li><a href="https://en.wikipedia.org/wiki/Front_and_back_ends" target="_blank" rel="noopener">Front and back ends</a></li><li><a href="https://pages.github.com/" target="_blank" rel="noopener">GitHub Pages</a></li><li><a href="https://zh.wikipedia.org/wiki/Ruby" target="_blank" rel="noopener">Ruby</a></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;How-About-Pelican&quot;&gt;&lt;a href=&quot;#How-About-Pelican&quot; class=&quot;headerlink&quot; title=&quot;How About Pelican?&quot;&gt;&lt;/a&gt;How About Pelican?&lt;/h2&gt;&lt;p&gt;&lt;img src
      
    
    </summary>
    
    
      <category term="Python" scheme="https://s40523119.github.io/cd2018/tags/Python/"/>
    
      <category term="Pelican" scheme="https://s40523119.github.io/cd2018/tags/Pelican/"/>
    
      <category term="Hexo" scheme="https://s40523119.github.io/cd2018/tags/Hexo/"/>
    
      <category term="Javascript" scheme="https://s40523119.github.io/cd2018/tags/Javascript/"/>
    
      <category term="static site" scheme="https://s40523119.github.io/cd2018/tags/static-site/"/>
    
  </entry>
  
  <entry>
    <title>Pelican vs Hexo(1)</title>
    <link href="https://s40523119.github.io/cd2018/2018/03/13/pelican-vs-hexo/"/>
    <id>https://s40523119.github.io/cd2018/2018/03/13/pelican-vs-hexo/</id>
    <published>2018-03-13T08:23:34.000Z</published>
    <updated>2018-03-27T03:21:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>分享兩款 Static Site Generator 的比較與簡單分析，若有勘誤之處煩請留言回報。</p><a id="more"></a><p><img src="./../../../../data/Hexo_vs_Pelican.jpg" alt="Hexo vs Pelican"></p><table><thead><tr><th></th><th style="text-align:center">Pelican</th><th style="text-align:center">HEXO</th></tr></thead><tbody><tr><td>Language</td><td style="text-align:center">Python</td><td style="text-align:center">Javascript</td></tr><tr><td>Markup Languages</td><td style="text-align:center">reStructuredText, Markdown, AsciiDoc</td><td style="text-align:center">HTML, Markdown, AsciiDoc, Org-Mode</td></tr><tr><td>Template Engine</td><td style="text-align:center">Jinja2</td><td style="text-align:center">Jinja2, Swig, EJS, Haml, Pug, etc…</td></tr><tr><td>Since</td><td style="text-align:center">2010</td><td style="text-align:center">2012</td></tr><tr><td>Github Star</td><td style="text-align:center">7,761 ★</td><td style="text-align:center">21,111 ★★★</td></tr><tr><td>Plugin</td><td style="text-align:center">119</td><td style="text-align:center">248</td></tr><tr><td>Open Sourse</td><td style="text-align:center">✔</td><td style="text-align:center">✔</td></tr><tr><td>Set-up</td><td style="text-align:center">Just few seconds</td><td style="text-align:center">less than 5 mins</td></tr><tr><td>Size</td><td style="text-align:center">10kb</td><td style="text-align:center">30mb</td></tr><tr><td>Config Type</td><td style="text-align:center">Python</td><td style="text-align:center">YAML</td></tr><tr><td>Setting</td><td style="text-align:center">Easy</td><td style="text-align:center">So Easy</td></tr></tbody></table><h2 id="Why-Do-We-Use-Static-Site-Generator"><a href="#Why-Do-We-Use-Static-Site-Generator" class="headerlink" title="Why Do We Use Static Site Generator ?"></a>Why Do We Use Static Site Generator ?</h2><p>想想當年，我是生在90年代(1990-1999)的孩子，時下年輕人都用著雅虎旗下的 無名小站，那時可以說是台灣部落格界的霸主，與其他部落格系統相較之下，無名小站給了不少地方供使用者自行外加功能，深受大眾喜愛。好比說，其他部落格系統只提供數種基本主題使用，無法自行創建主題;無名小站開放自定義模板，所以網路上就充滿著各式各樣的好看、酷炫主題，找個喜歡的主題，將程式代碼貼上無名小站提供的編輯器當中，新的主題就設定好了;更吸引人的是，還可以新增 Javascript的插件，無名必用的 音樂撥放器!!所以，那時候逛網誌的樂趣之一就是，聽聽每個朋友放什麼主題曲在自己的部落格首頁，有些人故意將插件隱藏，好聽的歌都得在他的文章下留言請教才能知道，既神秘又有趣。無名小站對我來說實在是很棒的回憶。</p><p>後來不幸的是， 無名小站 終止服務了…就真的好一陣子不再寫部落格了。在此之後，因系上老師有要求同學使用部落格的教學方式，又再度踏入部落格(Pelican)，但也是新的境界。現在大多人所使用的部落格是由他人寫好的服務系統，統整包含了伺服端、靜態檔案…等等，你只需要註冊服務帳號，透過網路上的文章編輯器，制式的管理系統，來經營你的部落格。好處是什麼呢?你不用擔心你的伺服器流量，也不需要任何能力門檻，你就只要乖乖打文章就可以了。但壞處呢?你必須接受你的網站有很多無用煩人的廣告;無法自定義樣式的困擾，受到系統上的許多限制;也得接受突如其來的網站終止服務..等等。言簡意賅地說就是，當你沒有擁有相當的控制權，你的一切就得被限制、牽制住。當然，若你只是一般的使用者，市面上的網誌服務系統卻是已經足夠，自建部落格可作為考慮選項。</p><p>自建部落格這件事，還是有很多的方法可循。通常，一般使用者升級為自建部落格時，會選用像是 Wordpress 這種服務，前端樣式由你來自定義，但是編輯文章或是管理更深層的文檔，還是有點綁手綁腳的。想要擁有完整的控制權，就是前端後端自己來，完整的全端!像是一下網際內容管理的課程，使用 Python 的 Flask，將主機設置在系上工作站裡的Ubuntu小主機，利用 Flask微型的網站伺服器套建來自建網站。但一般人沒有主機，就得付費託管雲端主機，更費心的是申請固定IP，放置主機在自己家裡，花的費用也是不可小覷。</p><p>幸運的是，GitHub 提供了免費的靜態網站託管，內建靜態網站產生器是Jekyll，是使用Ruby程式語言。GitHub官方網站也提供了簡單的流程，透過 Jekyll來快速建立網站。不過只要設定妥當，單純上傳正常網頁靜態檔案(html)上去，也是能夠正常運作。在我尚未相識 Hexo 這樣類型的工具之前，我不使用 Pelican，而是傻傻的把自己當做前端工程師一樣，開始手刻html、css、js，我還在學校的圖書館借了好幾本有關前端應用的相關書籍(HTML5、CSS3)，找別人公開分享的HTML5模板，拿來自己改，改成自己的需求，透過修改慢慢學習。但是，發現實在是很不方便!當時，新增一篇文章，就是我得自己新建一個html檔，寫著滿滿的標籤語言，時不時還得修改css來達到我理想的視覺，更討厭的是，靜態網頁做一點的變更，其他地方的各個小細節我得再一一自己修改，常常忘記修改部分連結，網誌就會鬧了笑話。這時才發現， Pelican的好，只不過後來又發現了其他框架，才知道網誌系統這樣的豐富多姿。</p><p>所以呢，透過Static Site Generator來管理、產生文章，可以專心一意又優雅的撰寫文章，無需去煩惱樣式，生成文章的惱人手續，還有多樣式的插件來達到複雜的表達，最後再部屬到 Github上，這就是善用工具的魅力。</p><p>以上表格是將部分重要性質來做比較，下一篇文有更深入的個人見解。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;分享兩款 Static Site Generator 的比較與簡單分析，若有勘誤之處煩請留言回報。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://s40523119.github.io/cd2018/tags/Python/"/>
    
      <category term="Pelican" scheme="https://s40523119.github.io/cd2018/tags/Pelican/"/>
    
      <category term="Hexo" scheme="https://s40523119.github.io/cd2018/tags/Hexo/"/>
    
      <category term="Javascript" scheme="https://s40523119.github.io/cd2018/tags/Javascript/"/>
    
      <category term="static site" scheme="https://s40523119.github.io/cd2018/tags/static-site/"/>
    
  </entry>
  
  <entry>
    <title>將Node.js與npm納入隨身系統</title>
    <link href="https://s40523119.github.io/cd2018/2018/03/10/nodejs/"/>
    <id>https://s40523119.github.io/cd2018/2018/03/10/nodejs/</id>
    <published>2018-03-10T09:13:22.000Z</published>
    <updated>2018-03-13T02:19:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>為讓工作效率提升，想要將 <code>Node.js</code> 納入課程隨身系統當中，新版的node內都有內建套件安裝系統 <code>npm</code>，無須另外下載，系統裝置好後再進行安裝 <code>hexo</code> 網誌框架系統。</p><a id="more"></a><ul><li><p>Step 1 下載 Node.js binary</p><p>  前往 <a href="https://nodejs.org/download/release/v9.8.0/" target="_blank" rel="noopener">Node binary</a> 下載最新的Node。</p></li><li><p>Step 2 解壓縮至隨身系統內，並將資料夾更名為 <code>nodejs</code> 。</p></li><li><p>Step 3 並在 <code>start.bat</code>內新增路徑置系統內:</p>  <figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> path5=<span class="variable">%Disk%</span>:\nodejs;<span class="variable">%Disk%</span>:\nodejs\node_modules\npm\bin;</span><br></pre></td></tr></table></figure><p>  並在 <code>path</code> 填上 <code>path5</code>:</p>  <figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">path</span>=<span class="variable">%path1%</span>;<span class="variable">%path2%</span>;<span class="variable">%path3%</span>;<span class="variable">%path4%</span>;<span class="variable">%path5%</span></span><br></pre></td></tr></table></figure></li><li><p>Step 4 啟動隨身系統，更新npm套件版本</p>  <figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -g npm-upgrade</span><br></pre></td></tr></table></figure></li><li><p>Step 5 再安裝 <code>hexo</code> 網誌框架系統。</p>  <figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure></li></ul><p>以上完成 <code>Node.js Portable</code>以及安裝 <code>hexo</code> 網誌框架系統。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;為讓工作效率提升，想要將 &lt;code&gt;Node.js&lt;/code&gt; 納入課程隨身系統當中，新版的node內都有內建套件安裝系統 &lt;code&gt;npm&lt;/code&gt;，無須另外下載，系統裝置好後再進行安裝 &lt;code&gt;hexo&lt;/code&gt; 網誌框架系統。&lt;/p&gt;
    
    </summary>
    
    
      <category term="node.js" scheme="https://s40523119.github.io/cd2018/tags/node-js/"/>
    
      <category term="portable" scheme="https://s40523119.github.io/cd2018/tags/portable/"/>
    
  </entry>
  
  <entry>
    <title>利用Brython.js在瀏覽器執行Python程式</title>
    <link href="https://s40523119.github.io/cd2018/2018/03/07/run-python-in-web/"/>
    <id>https://s40523119.github.io/cd2018/2018/03/07/run-python-in-web/</id>
    <published>2018-03-07T12:37:32.000Z</published>
    <updated>2018-03-13T03:48:06.000Z</updated>
    
    <content type="html"><![CDATA[<script type="text/javascript" src="https://cdn.rawgit.com/brython-dev/brython/3.4.0/www/src/brython.js"></script><p>將<a href="/cd2018/2018/03/06/w1/">前一篇文章</a>程式以 <code>Brython.js</code> 在瀏覽器中執行，並改寫部分程式碼，得以與瀏覽器互動。</p><p><a href="https://brython.info/" target="_blank" rel="noopener">Brython</a> 是實現運行Python in web的 Javascript 程式庫，並提供HTML5環境（提供了DOM對象和事件接口）。</p><a id="more"></a><h1 id="Tutorial"><a href="#Tutorial" class="headerlink" title="Tutorial"></a>Tutorial</h1><ul><li><p>Step 1 引入Javascript檔案</p><p>  在自己的網頁靜態檔案中加入<a href="https://github.com/brython-dev/brython/releases/tag/3.4.0" target="_blank" rel="noopener">Brython.js</a>，或是引入線上CDN服務器內的<a href="https://github.com/brython-dev/brython/releases/tag/3.4.0" target="_blank" rel="noopener">CDN Brython</a>。<br>  我採取引用線上檔案的方式，引入需要使用到Brython的文章內，加入下列程式碼:</p></li></ul><pre><code><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"https://cdn.rawgit.com/brython-dev/brython/3.4.0/www/src/brython.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></code></pre><ul><li><p>Step 2 建立Brython區塊</p><p>  為了要在網頁中運行 <code>Pyhton</code> 腳本，必須引用函數 <code>brython()</code> 。<br>  所以我們在這裡建立一個html body，並賦予它 <code>onload=brython()</code>，再建立一個div區塊，則裡面內容則放入想要運行的Python腳本。</p></li></ul><div class="tip"><br>因為使用 <code>hexo</code> 來進行渲染md檔，所以我們的Python程式碼會被渲染，跳行的部分會被填入 <code>&lt;br&gt;</code> 所以我們得在程式碼頭尾部分加入，HEXO的標籤  % raw % % endraw % ，到時HEXO就會讓標籤內的文字以原始形式呈現。<br></div>    <pre><code><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onload</span>=<span class="string">"brython()"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/python"</span>&gt;</span><span class="undefined">&#123;% raw %&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        ### Python code ###</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        &#123;% endraw %&#125;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></code></pre><ul><li><p>Step 3 編寫程式</p><p>  我想透過按鈕來執行我的程式碼，所以得將按鈕綁定到特定的 <code>document</code> 。利用python的裝飾器來加入以下程式碼:</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@document["mybutton"].bind("click")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#Your code</span></span><br></pre></td></tr></table></figure><p>  參照Brython官方文件，讀取檔案時，hexo會在文件名後面加入當下時間，所以我們得先建立偽裝的時間代碼:</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fake_qs = <span class="string">'?foo=%s'</span> %time.time()</span><br></pre></td></tr></table></figure><p>  所以開啟文件時，在檔案名後方加入 <code>fake_qs</code> ，就可以讀去到文件，範例如下:</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'./../../../../data/2a.txt'</span>+fake_qs) <span class="keyword">as</span> fh:</span><br></pre></td></tr></table></figure><p>  最後，在為我的程式配上一顆按鈕，並為它綁定ID到mybutton，按下去瀏覽器就會執行我的代碼:</p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"mybutton"</span> <span class="attr">class</span>=<span class="string">"next"</span>&gt;</span>執行<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>以上教程是適用於解決課程中問題，其他詳盡寫法請參照官方文件內容。</p><ul><li>完整程式碼:</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;body onload=<span class="string">"brython()"</span>&gt;</span><br><span class="line">    &lt;div class="paginator" &gt;</span><br><span class="line">        &lt;script type=<span class="string">"text/python"</span>&gt;&#123;% raw %&#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">from</span> browser <span class="keyword">import</span> document,html</span><br><span class="line">            <span class="keyword">import</span> re, time</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 按下按鈕執行以下程式</span></span><br><span class="line"></span><br><span class="line"><span class="meta">            @document["mybutton"].bind("click")</span></span><br><span class="line">            <span class="function"><span class="keyword">def</span> <span class="title">echo</span><span class="params">(ev)</span>:</span></span><br><span class="line">                fake_qs = <span class="string">'?foo=%s'</span> %time.time()</span><br><span class="line"></span><br><span class="line">                <span class="keyword">with</span> open(<span class="string">'./../../../../data/2a.txt'</span>+fake_qs) <span class="keyword">as</span> fh:</span><br><span class="line">                    data = [(re.findall(<span class="string">'405\d\d\d\d\d'</span>, data[int(i)])) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(data))]</span><br><span class="line">                num = <span class="number">0</span></span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> range(len(data)):</span><br><span class="line">                    team = data[i]</span><br><span class="line">                    <span class="keyword">for</span> g <span class="keyword">in</span> range(len(team)):</span><br><span class="line">                        <span class="keyword">if</span> g%<span class="number">3</span> == <span class="number">0</span>:</span><br><span class="line">                            num += <span class="number">1</span></span><br><span class="line">                            document[<span class="string">'zone'</span>] &lt;= (<span class="string">'第'</span> + str(num) +<span class="string">'組:'</span> + str(team[g:g+<span class="number">3</span>]) + html.BR())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">            @document["mybutton2"].bind("click")</span></span><br><span class="line">            <span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(ev)</span>:</span></span><br><span class="line">                <span class="keyword">for</span> row <span class="keyword">in</span> document[<span class="string">'zone'</span>]:</span><br><span class="line">                    row.remove()</span><br><span class="line">        &#123;% endraw %&#125;&lt;/script&gt;            </span><br><span class="line">        &lt;button id="mybutton" class="next"&gt;執行&lt;/button&gt;&lt;button id="mybutton2" class="next"&gt;清除&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><body onload="brython()"><br>    <div class="paginator"><br>        <script type="text/python">        from browser import document,html        import re, time        # 按下按鈕執行以下程式        @document["mybutton"].bind("click")        def echo(ev):            fake_qs = '?foo=%s' %time.time()            with open('./../../../../data/2a.txt'+fake_qs) as fh:                data = fh.readlines() #逐行讀入                data = [(re.findall('405\d\d\d\d\d', data[int(i)])) for i in range(len(data))]            num = 0            for i in range(len(data)):                team = data[i]                for g in range(len(team)):                    if g%3 == 0:                        num += 1                        document['zone'] <= ('第' + str(num) +'組:' + str(team[g:g+3]) + html.BR())        @document["mybutton2"].bind("click")        def delete(ev):            for row in document['zone']:                row.remove()        </script><br><br>    <button id="mybutton" class="next">執行</button><button id="mybutton2" class="next">清除</button><br>    </div><br></body><ul><li>輸出:</li></ul><div id="zone"><br><br></div><ul><li>Reference:<ul><li><a href="https://brython.info/static_doc/en/intro.html?lang=en]" target="_blank" rel="noopener">Brython Document</a></li><li><a href="https://brython.info/static_doc/en/cookbook/read_file.html" target="_blank" rel="noopener">Read the content of a file in Brython</a></li><li><a href="https://cdnjs.com/libraries/brython" target="_blank" rel="noopener">Brython CDN</a></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;script type=&quot;text/javascript&quot; src=&quot;https://cdn.rawgit.com/brython-dev/brython/3.4.0/www/src/brython.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;將&lt;a href=&quot;/cd2018/2018/03/06/w1/&quot;&gt;前一篇文章&lt;/a&gt;程式以 &lt;code&gt;Brython.js&lt;/code&gt; 在瀏覽器中執行，並改寫部分程式碼，得以與瀏覽器互動。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://brython.info/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Brython&lt;/a&gt; 是實現運行Python in web的 Javascript 程式庫，並提供HTML5環境（提供了DOM對象和事件接口）。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://s40523119.github.io/cd2018/tags/Python/"/>
    
      <category term="Brython" scheme="https://s40523119.github.io/cd2018/tags/Brython/"/>
    
  </entry>
  
  <entry>
    <title>利用python將原始分組資料解析、排列</title>
    <link href="https://s40523119.github.io/cd2018/2018/03/06/python-data/"/>
    <id>https://s40523119.github.io/cd2018/2018/03/06/python-data/</id>
    <published>2018-03-06T13:55:00.000Z</published>
    <updated>2018-03-08T08:22:42.000Z</updated>
    
    <content type="html"><![CDATA[<script type="text/javascript" src="https://cdn.rawgit.com/brython-dev/brython/3.4.0/www/src/brython.js"></script><p>第九組組員40523119實作利用python將組別原始資料解析、分組、整理與排列，程式碼如下:</p><p>keyword:Python parse, Python 字串處理</p><a id="more"></a><ul><li>版本1</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">"2a.txt"</span>) <span class="keyword">as</span> fh:</span><br><span class="line">    data = fh.readlines() <span class="comment">#逐行讀入</span></span><br><span class="line">    data= [w.replace(<span class="string">'\n'</span>, <span class="string">''</span>) <span class="keyword">for</span> w <span class="keyword">in</span> data]    <span class="comment">#將跳行字符取代為空白</span></span><br><span class="line">    </span><br><span class="line">team_list = list() <span class="comment">#建立空list</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(data)):  </span><br><span class="line">    team = data[i].split()  <span class="comment">#先將每一排切出來</span></span><br><span class="line">    <span class="keyword">for</span> g <span class="keyword">in</span> range(<span class="number">0</span>,len(team),<span class="number">3</span>):  </span><br><span class="line">        b = team[g:g+<span class="number">3</span>]   <span class="comment">#每三位學員為一組</span></span><br><span class="line">        team_list.append(b) <span class="comment">#加入先前建立的空list</span></span><br><span class="line">        </span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> range(len(team_list)):  <span class="comment">#將資料填上組別編號</span></span><br><span class="line">    print(<span class="string">'第'</span> + str(num+<span class="number">1</span>) + <span class="string">'組:'</span> + str(team_list[num]))</span><br></pre></td></tr></table></figure><p>Output:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">第1組:[&apos;40523115&apos;, &apos;40523108&apos;, &apos;40523116&apos;]</span><br><span class="line">第2組:[&apos;40523144&apos;, &apos;40523111&apos;, &apos;40523141&apos;]</span><br><span class="line">第3組:[&apos;40523104&apos;, &apos;40523102&apos;, &apos;40523123&apos;]</span><br><span class="line">第4組:[&apos;40523137&apos;, &apos;40523117&apos;, &apos;40523135&apos;]</span><br><span class="line">第5組:[&apos;40523147&apos;, &apos;40523146&apos;, &apos;40523145&apos;]</span><br><span class="line">第6組:[&apos;40523122&apos;, &apos;40523136&apos;, &apos;40523132&apos;]</span><br><span class="line">第7組:[&apos;40523127&apos;, &apos;40523126&apos;, &apos;40523125&apos;]</span><br><span class="line">第8組:[&apos;40523124&apos;, &apos;40523118&apos;, &apos;40523131&apos;]</span><br><span class="line">第9組:[&apos;40523121&apos;, &apos;40523120&apos;, &apos;40523119&apos;]</span><br><span class="line">第10組:[&apos;40523105&apos;, &apos;40523106&apos;, &apos;40523107&apos;]</span><br><span class="line">第11組:[&apos;40523143&apos;, &apos;40523128&apos;, &apos;40523129&apos;]</span><br><span class="line">第12組:[&apos;40523130&apos;, &apos;40523139&apos;, &apos;40523133&apos;]</span><br><span class="line">第13組:[&apos;40523142&apos;, &apos;40523148&apos;, &apos;40523140&apos;]</span><br><span class="line">第14組:[&apos;40523113&apos;, &apos;40523138&apos;, &apos;40523134&apos;]</span><br></pre></td></tr></table></figure><ul><li>版本2:</li></ul><p>利用套件 <code>re</code> 來快速解析原始資料，減去對系統字符處理的手續，進而直接擷取理想的資料組態。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"2a.txt"</span>) <span class="keyword">as</span> fh:</span><br><span class="line">    data = fh.readlines() <span class="comment">#逐行讀入</span></span><br><span class="line">    data = [(re.findall(<span class="string">'405\d\d\d\d\d'</span>, data[int(i)])) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(data))]</span><br><span class="line">num = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(data)):</span><br><span class="line">    team = data[i]</span><br><span class="line">    <span class="keyword">for</span> g <span class="keyword">in</span> range(len(team)):</span><br><span class="line">        <span class="keyword">if</span> g%<span class="number">3</span> == <span class="number">0</span>:</span><br><span class="line">            num += <span class="number">1</span></span><br><span class="line">            print(<span class="string">'第'</span> + str(num) +<span class="string">'組:'</span> + str(team[g:g+<span class="number">3</span>]))</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">第1組:[&apos;40523115&apos;, &apos;40523108&apos;, &apos;40523116&apos;]</span><br><span class="line">第2組:[&apos;40523144&apos;, &apos;40523111&apos;, &apos;40523141&apos;]</span><br><span class="line">第3組:[&apos;40523104&apos;, &apos;40523102&apos;, &apos;40523123&apos;]</span><br><span class="line">第4組:[&apos;40523137&apos;, &apos;40523117&apos;, &apos;40523135&apos;]</span><br><span class="line">第5組:[&apos;40523147&apos;, &apos;40523146&apos;, &apos;40523145&apos;]</span><br><span class="line">第6組:[&apos;40523122&apos;, &apos;40523136&apos;, &apos;40523132&apos;]</span><br><span class="line">第7組:[&apos;40523127&apos;, &apos;40523126&apos;, &apos;40523125&apos;]</span><br><span class="line">第8組:[&apos;40523124&apos;, &apos;40523118&apos;, &apos;40523131&apos;]</span><br><span class="line">第9組:[&apos;40523121&apos;, &apos;40523120&apos;, &apos;40523119&apos;]</span><br><span class="line">第10組:[&apos;40523105&apos;, &apos;40523106&apos;, &apos;40523107&apos;]</span><br><span class="line">第11組:[&apos;40523143&apos;, &apos;40523128&apos;, &apos;40523129&apos;]</span><br><span class="line">第12組:[&apos;40523130&apos;, &apos;40523139&apos;, &apos;40523133&apos;]</span><br><span class="line">第13組:[&apos;40523142&apos;, &apos;40523148&apos;, &apos;40523140&apos;]</span><br><span class="line">第14組:[&apos;40523113&apos;, &apos;40523138&apos;, &apos;40523134&apos;]</span><br></pre></td></tr></table></figure><ul><li>Reference:<ul><li><a href="https://docs.python.org/3/library/re.html]" target="_blank" rel="noopener">Python Regular expression operations</a></li><li><a href="https://segmentfault.com/q/1010000003069314/a-1020000003069680" target="_blank" rel="noopener">在python中如何简单优雅地将list分组</a></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;script type=&quot;text/javascript&quot; src=&quot;https://cdn.rawgit.com/brython-dev/brython/3.4.0/www/src/brython.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;第九組組員40523119實作利用python將組別原始資料解析、分組、整理與排列，程式碼如下:&lt;/p&gt;
&lt;p&gt;keyword:Python parse, Python 字串處理&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://s40523119.github.io/cd2018/tags/Python/"/>
    
  </entry>
  
</feed>
